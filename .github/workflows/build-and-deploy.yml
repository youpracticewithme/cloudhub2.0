# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      #cache dependencies
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Step 1 - Echo out a GitHub Actions Secret to the logs
        run: |
          echo "The GitHub Action Secret will be masked:  "
          echo ${{ secrets.CONNECTEDAPPSECRET }} | sed 's/./& /g'
          
      # setup JDK 1.8
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # setup maven credentials for server
      - name: Add Server Connected App credentials on maven settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
              "id": "anypoint-exchange-v3",
              "username": "~~~Client~~~",
              "password": ${{ secrets.CONNECTEDAPPSECRET }}
            }]
            
      #print maven settings to confirm changes
      - name: Print effective-settings (confirm step)
        run: mvn help:effective-settings
        
      #build artifact  
      - name: Build with Maven
        run: mvn clean -B package --file pom.xml
        
      #push maven artifact to anypoint exchange
      - name: Upload artifact to exchange
        run: mvn clean -B deploy --file pom.xml
  
  
  #lets deploy this artefact on cloudhub 2.0 anypoint runtimemanager
  deploy:
    needs: build
    
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      #cache dependencies
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      # setup maven credentials for server
      - name: Add Server Connected App credentials on maven settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
              "id": "anypoint-exchange-v3",
              "username": "~~~Client~~~",
              "password": ${{ secrets.CONNECTEDAPPSECRET }}
            }]
            
      #print maven settings to confirm changes
      - name: Print effective-settings (confirm step)
        run: mvn help:effective-settings
        
      - name: Deploy to cloudHub2.0
        run: mvn clean deploy -DmuleDeploy
      
      
